/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.samza.sql.api.task;

import org.apache.samza.sql.api.data.Relation;
import org.apache.samza.sql.api.data.Tuple;


/**
 * This class defines the interface class to be used by the operators to send their output via runtime system resources,
 * s.t. the output system streams, the system storage, or <code>OperatorRoutingContext</code>.
 *
 */
public interface RuntimeSystemContext {

  /**
   * This method allows the current operator send its relation output to next
   *
   * @param currentOpId
   *     The identifier of the current operator
   * @param deltaRelation
   *     The delta <code>Relation</code> output generated by the current operator
   * @throws Exception
   *     Throws exception if failed
   */
  public void sendToNextRelationOperator(String currentOpId, Relation deltaRelation) throws Exception;

  /**
   * This method allows the current operator send its tuple output to next
   *
   * @param currentOpId
   *     The identifier of the current operator
   * @param tuple
   *     The <code>Tuple</code> object generated by the current operator
   * @throws Exception
   *     Throws exception if failed
   */
  public void sendToNextTupleOperator(String currentOpId, Tuple tuple) throws Exception;

  /**
   * This method allows the current operator triggers timeout actions via the <code>RuntimeSystemContext</code>
   *
   * @param currentOpId
   *     The identifier of the current operator
   * @param currentSystemNano
   *     The current system nanosecond value when the timeout occurs
   * @throws Exception
   *     Throws exception if failed
   */
  public void sendToNextTimeoutOperator(String currentOpId, long currentSystemNano) throws Exception;

}
